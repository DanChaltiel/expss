% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/keep.R
\name{keep}
\alias{keep}
\alias{\%keep\%}
\alias{.keep}
\alias{except}
\alias{\%except\%}
\alias{.except}
\title{Keep or drop elements by name/criteria in data.frame/matrix/list/vector}
\usage{
keep(data, ...)

data \%keep\% ...

.keep(...)

except(data, ...)

data \%except\% ...

.except(...)
}
\arguments{
\item{data}{data.frame/matrix/list/vector}

\item{...}{column names of type character/numeric or criteria/logical functions}
}
\value{
object of the same type as \code{data}
}
\description{
\code{keep} selects variables/elements from data.frame by their names or by 
criteria (see \link{criteria}). \code{except} drops  variables/elements from 
data.frame by their names or by criteria. For non-infix versions of functions
names at the top-level will be used as is (non-standard evaluation). For 
standard evaluation of parameters you can surround them by round brackets.
See example. Methods for list will apply \code{keep}/\code{except} to each
element of the list separately. \code{.keep}/\code{.except} are versions
which works with \link{default_dataset}.
}
\examples{
keep(iris, Sepal.Length, Sepal.Width)  
except(iris, Species)

keep(iris, Species, other()) # move 'Species' to the first position
keep(iris, to("Petal.Width")) # keep all columns up to 'Species'

except(iris, perl("^Petal")) # remove columns which names start with 'Petal'

except(iris, 5) # remove fifth column

data(airquality)
keep(airquality, from("Ozone") & to("Wind")) # keep columns from 'Ozone' to 'Wind'
keep(airquality, Ozone \%to\% Wind) # the same result

# character expansion
dfs = data.frame(
     a = 10 \%r\% 5,
     b_1 = 11 \%r\% 5,
     b_2 = 12 \%r\% 5,
     b_3 = 12 \%r\% 5,
     b_4 = 14 \%r\% 5,
     b_5 = 15 \%r\% 5 
 )
 i = 1:5
 keep(dfs, b_1 \%to\% b_5) 
 keep(dfs, subst("b_`i`")) # the same result
 
 # standard and non-standard evaluation
 data(mtcars)
 # generally it is not recommended to name parameter as column in data.frame
 am = "vs" 
 # non-standard evaluation of top-level items
 keep(mtcars, am) # we get 'am' column
 # but standard evaluation of other items
 keep(mtcars, (am)) # we get 'vs' column
 
 many_vars = c("am", "vs", "cyl")
 keep(mtcars, (many_vars))
 
}
