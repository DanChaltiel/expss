% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/criteria_functions.R
\name{criteria}
\alias{criteria}
\alias{eq}
\alias{fixed}
\alias{gt}
\alias{gte}
\alias{lt}
\alias{lte}
\alias{neq}
\alias{perl}
\alias{regex}
\title{Criteria functions}
\usage{
eq(x)

neq(x)

lt(x)

gt(x)

lte(x)

gte(x)

perl(pattern, ignore.case = FALSE, useBytes = FALSE)

regex(pattern, ignore.case = FALSE, useBytes = FALSE)

fixed(pattern, ignore.case = FALSE, useBytes = FALSE)
}
\arguments{
\item{x}{vector}

\item{pattern}{character string containing a regular expression (or character
string for \code{fixed}) to be matched in the given character vector.
Coerced by as.character to a character string if possible.}

\item{ignore.case}{logical see \link[base]{grepl}}

\item{useBytes}{logical see \link[base]{grepl}}
}
\value{
function of class 'criterion' which tests its argument against condition and return logical value
}
\description{
These functions returns criteria functions which could be used in different 
situation - see \link{if_val}, \link{set_na}, \link{\%i\%}, \link{\%d\%},
\link{count_if} etc. For example, \code{gt(5)} returns function which tests
whether its argument greater than five.  \code{fixed("apple")} return function
which tests whether its argument contains "apple". Logical operations (|, &,
!, xor) defined for these functions.
List of functions:
\itemize{
\item{\code{gt}}{ greater than}
\item{\code{gte}}{ greater than or equal}
\item{\code{eq}}{ equal} 
\item{\code{neq}}{ not equal} 
\item{\code{lt}}{ less than}
\item{\code{lte}}{ less than or equal}
\item{\code{regex}}{ use POSIX 1003.2 extended regular expressions. For details see \link[base]{grepl}}
\item{\code{perl}}{ perl-compatible regular expressions. For details see \link[base]{grepl}}
\item{\code{fixed}}{ pattern is a string to be matched as is. For details see \link[base]{grepl}}
}
}
\examples{
# operations on vector
1:6 \%d\% gt(4) # 1:4

letters \%i\% (fixed("a") | fixed("z")) # a, z

# examples with count_if
df1 = data.frame(
    a=c("apples",   "oranges",     "peaches",     "apples"),
    b = c(32, 54, 75, 86)
)

count_if(gt(55),df1$b) # greater than 55 = 2

count_if(neq(75),df1$b) # not equal 75 = 3

count_if(gte(32),df1$b) # greater than or equal 32 = 4

count_if(gt(32) & lt(86),df1$b) # greater than 32 and less than 86 = 2

# values that started on 'a'
count_if(regex("^a"),df1) # 2

# count_row_if
count_row_if(regex("^a"),df1) # c(1,0,0,1)



}
\seealso{
\link{count_if}, \link{if_val}, \link{set_na}, \link{\%i\%}, \link{\%d\%}
}

